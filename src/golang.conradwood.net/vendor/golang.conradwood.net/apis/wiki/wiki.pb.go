// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/wiki/wiki.proto
// DO NOT EDIT!

/*
Package wiki is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/wiki/wiki.proto

It has these top-level messages:
	PageRequest
	HTTPPageRequest
	HTMLPage
	SourcePage
	Page
*/
package wiki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PageRequest struct {
	WikiPath  string `protobuf:"bytes,1,opt,name=WikiPath" json:"WikiPath,omitempty"`
	Partition string `protobuf:"bytes,2,opt,name=Partition" json:"Partition,omitempty"`
}

func (m *PageRequest) Reset()                    { *m = PageRequest{} }
func (m *PageRequest) String() string            { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()               {}
func (*PageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PageRequest) GetWikiPath() string {
	if m != nil {
		return m.WikiPath
	}
	return ""
}

func (m *PageRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

type HTTPPageRequest struct {
	PageRequest  *PageRequest           `protobuf:"bytes,1,opt,name=PageRequest" json:"PageRequest,omitempty"`
	ServeRequest *h2gproxy.ServeRequest `protobuf:"bytes,2,opt,name=ServeRequest" json:"ServeRequest,omitempty"`
}

func (m *HTTPPageRequest) Reset()                    { *m = HTTPPageRequest{} }
func (m *HTTPPageRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPPageRequest) ProtoMessage()               {}
func (*HTTPPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HTTPPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

func (m *HTTPPageRequest) GetServeRequest() *h2gproxy.ServeRequest {
	if m != nil {
		return m.ServeRequest
	}
	return nil
}

type HTMLPage struct {
	Path    string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Body    string `protobuf:"bytes,2,opt,name=Body" json:"Body,omitempty"`
	IsEmpty bool   `protobuf:"varint,3,opt,name=IsEmpty" json:"IsEmpty,omitempty"`
}

func (m *HTMLPage) Reset()                    { *m = HTMLPage{} }
func (m *HTMLPage) String() string            { return proto.CompactTextString(m) }
func (*HTMLPage) ProtoMessage()               {}
func (*HTMLPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HTMLPage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTMLPage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *HTMLPage) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

type SourcePage struct {
	Path   string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source" json:"Source,omitempty"`
}

func (m *SourcePage) Reset()                    { *m = SourcePage{} }
func (m *SourcePage) String() string            { return proto.CompactTextString(m) }
func (*SourcePage) ProtoMessage()               {}
func (*SourcePage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SourcePage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SourcePage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type Page struct {
	Source string `protobuf:"bytes,1,opt,name=Source" json:"Source,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Page) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*PageRequest)(nil), "wiki.PageRequest")
	proto.RegisterType((*HTTPPageRequest)(nil), "wiki.HTTPPageRequest")
	proto.RegisterType((*HTMLPage)(nil), "wiki.HTMLPage")
	proto.RegisterType((*SourcePage)(nil), "wiki.SourcePage")
	proto.RegisterType((*Page)(nil), "wiki.Page")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wiki service

type WikiClient interface {
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// get a page by path (pre-rendered in html)
	GetPageAsHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// get a page by path (source)
	GetPageAsSource(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*SourcePage, error)
	// get a page as an editable html
	GetPageAsEditHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
	// save page
	SavePage(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*HTMLPage, error)
}

type wikiClient struct {
	cc *grpc.ClientConn
}

func NewWikiClient(cc *grpc.ClientConn) WikiClient {
	return &wikiClient{cc}
}

func (c *wikiClient) HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/HandleHTTPRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) GetPageAsHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/GetPageAsHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) GetPageAsSource(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*SourcePage, error) {
	out := new(SourcePage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/GetPageAsSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) GetPageAsEditHTML(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/GetPageAsEditHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) SavePage(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/wiki.Wiki/SavePage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wiki service

type WikiServer interface {
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(context.Context, *HTTPPageRequest) (*HTMLPage, error)
	// get a page by path (pre-rendered in html)
	GetPageAsHTML(context.Context, *PageRequest) (*HTMLPage, error)
	// get a page by path (source)
	GetPageAsSource(context.Context, *PageRequest) (*SourcePage, error)
	// get a page as an editable html
	GetPageAsEditHTML(context.Context, *PageRequest) (*HTMLPage, error)
	// save page
	SavePage(context.Context, *h2gproxy.ServeRequest) (*HTMLPage, error)
}

func RegisterWikiServer(s *grpc.Server, srv WikiServer) {
	s.RegisterService(&_Wiki_serviceDesc, srv)
}

func _Wiki_HandleHTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).HandleHTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/HandleHTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).HandleHTTPRequest(ctx, req.(*HTTPPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_GetPageAsHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).GetPageAsHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/GetPageAsHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).GetPageAsHTML(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_GetPageAsSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).GetPageAsSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/GetPageAsSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).GetPageAsSource(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_GetPageAsEditHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).GetPageAsEditHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/GetPageAsEditHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).GetPageAsEditHTML(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_SavePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).SavePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.Wiki/SavePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).SavePage(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wiki_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wiki.Wiki",
	HandlerType: (*WikiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleHTTPRequest",
			Handler:    _Wiki_HandleHTTPRequest_Handler,
		},
		{
			MethodName: "GetPageAsHTML",
			Handler:    _Wiki_GetPageAsHTML_Handler,
		},
		{
			MethodName: "GetPageAsSource",
			Handler:    _Wiki_GetPageAsSource_Handler,
		},
		{
			MethodName: "GetPageAsEditHTML",
			Handler:    _Wiki_GetPageAsEditHTML_Handler,
		},
		{
			MethodName: "SavePage",
			Handler:    _Wiki_SavePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/wiki/wiki.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/wiki/wiki.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6b, 0xc2, 0x40,
	0x10, 0x25, 0x56, 0x6c, 0x1c, 0xdb, 0x5a, 0x17, 0x2a, 0x21, 0x94, 0x22, 0x39, 0x49, 0x0f, 0x11,
	0x22, 0x48, 0xf1, 0x56, 0x41, 0xb4, 0x60, 0x21, 0x44, 0xa1, 0xe7, 0xad, 0x59, 0xe2, 0xa2, 0x66,
	0xd3, 0x64, 0xd5, 0x7a, 0xed, 0xcf, 0xe8, 0xaf, 0x2d, 0xbb, 0x89, 0xe9, 0xaa, 0x55, 0x7a, 0x49,
	0xe6, 0xe3, 0xbd, 0x97, 0x99, 0x97, 0x81, 0xc7, 0x80, 0x2d, 0x70, 0x18, 0xd8, 0x53, 0x16, 0xc6,
	0xd8, 0xdf, 0x30, 0xe6, 0xdb, 0x21, 0xe1, 0x2d, 0x1c, 0xd1, 0xa4, 0xb5, 0xa1, 0x73, 0x2a, 0x1f,
	0x76, 0x14, 0x33, 0xce, 0x50, 0x51, 0xc4, 0xa6, 0x7d, 0x86, 0x31, 0x65, 0xcb, 0x25, 0x0b, 0xb3,
	0x57, 0xca, 0x32, 0x9d, 0x33, 0xf8, 0x99, 0x13, 0x44, 0x31, 0xfb, 0xdc, 0xe6, 0x41, 0xca, 0xb1,
	0x06, 0x50, 0x71, 0x71, 0x40, 0x3c, 0xf2, 0xb1, 0x22, 0x09, 0x47, 0x26, 0xe8, 0x6f, 0x74, 0x4e,
	0x5d, 0xcc, 0x67, 0x86, 0xd6, 0xd0, 0x9a, 0x65, 0x2f, 0xcf, 0xd1, 0x3d, 0x94, 0x5d, 0x1c, 0x73,
	0xca, 0x29, 0x0b, 0x8d, 0x82, 0x6c, 0xfe, 0x16, 0xac, 0x2f, 0x0d, 0xaa, 0xc3, 0xc9, 0xc4, 0x55,
	0xd5, 0xda, 0x7b, 0xe2, 0x52, 0xb0, 0xe2, 0xd4, 0x6c, 0xb9, 0xa8, 0xd2, 0xf0, 0xf6, 0x46, 0xe8,
	0xc2, 0xd5, 0x98, 0xc4, 0xeb, 0x9c, 0x55, 0x90, 0xac, 0xba, 0x9d, 0x0f, 0xae, 0x76, 0xbd, 0x3d,
	0xac, 0x35, 0x02, 0x7d, 0x38, 0x79, 0x1d, 0x09, 0x39, 0x84, 0xa0, 0xa8, 0xac, 0x21, 0x63, 0x51,
	0xeb, 0x31, 0x7f, 0x9b, 0x4d, 0x2f, 0x63, 0x64, 0xc0, 0xe5, 0x4b, 0xd2, 0x5f, 0x46, 0x7c, 0x6b,
	0x5c, 0x34, 0xb4, 0xa6, 0xee, 0xed, 0x52, 0xeb, 0x09, 0x60, 0xcc, 0x56, 0xf1, 0x94, 0x9c, 0xd4,
	0xab, 0x43, 0x29, 0x45, 0x64, 0x8a, 0x59, 0x66, 0x3d, 0x08, 0x6c, 0x40, 0x94, 0xbe, 0xa6, 0xf6,
	0x9d, 0xef, 0x02, 0x14, 0x85, 0xaf, 0xa8, 0x0b, 0xb5, 0x21, 0x0e, 0xfd, 0x05, 0x11, 0xd6, 0xed,
	0x1c, 0xb8, 0x4b, 0x1d, 0x3a, 0x70, 0xd3, 0xbc, 0xd9, 0x95, 0xb3, 0x05, 0x1d, 0xb8, 0x1e, 0x10,
	0x2e, 0xc2, 0xe7, 0x44, 0x14, 0xd1, 0xb1, 0xb3, 0x47, 0x9c, 0x0e, 0x54, 0x73, 0x4e, 0x3a, 0xcb,
	0x5f, 0xac, 0xdb, 0xb4, 0xa4, 0x2c, 0xdf, 0x81, 0x5a, 0xce, 0xeb, 0xfb, 0x94, 0xff, 0xf7, 0x7b,
	0x0e, 0xe8, 0x63, 0xbc, 0x4e, 0x35, 0x4e, 0xfc, 0xc2, 0x43, 0x4e, 0xcf, 0x04, 0x23, 0x24, 0x5c,
	0xbd, 0x62, 0x71, 0xc1, 0x12, 0xf4, 0x5e, 0x92, 0x57, 0xdb, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x46, 0xdb, 0x70, 0xdf, 0x4d, 0x03, 0x00, 0x00,
}
