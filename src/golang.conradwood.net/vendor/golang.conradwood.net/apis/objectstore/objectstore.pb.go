// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/objectstore/objectstore.proto
// DO NOT EDIT!

/*
Package objectstore is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/objectstore/objectstore.proto

It has these top-level messages:
	ObjectMeta
	PutWithIDRequest
	GetRequest
	Object
	ListResponse
	ListRequest
	PutResponse
	GetResponse
	EvictRequest
*/
package objectstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// database object
type ObjectMeta struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// the key under with which the client knows it
	Key string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	// version, normally 0. but we _can_ in future version stuff
	Version uint64 `protobuf:"varint,3,opt,name=Version" json:"Version,omitempty"`
	// the service who submitted it
	Service string `protobuf:"bytes,4,opt,name=Service" json:"Service,omitempty"`
	// the user who submitted it
	Creator string `protobuf:"bytes,5,opt,name=Creator" json:"Creator,omitempty"`
	// when was it last retrieved? (unix timestamp)
	LastRetrieved uint32 `protobuf:"varint,6,opt,name=LastRetrieved" json:"LastRetrieved,omitempty"`
	// when was it created? (unix timestamp)
	Created uint32 `protobuf:"varint,7,opt,name=Created" json:"Created,omitempty"`
	// when was it updated? (unix timestamp)
	LastUpdated uint32 `protobuf:"varint,8,opt,name=LastUpdated" json:"LastUpdated,omitempty"`
	// the key under which to find it in the store (e.g. a filename)
	StoreKey string `protobuf:"bytes,9,opt,name=StoreKey" json:"StoreKey,omitempty"`
	// a store_id (which store is it in?)
	StoreID uint32 `protobuf:"varint,10,opt,name=StoreID" json:"StoreID,omitempty"`
	Expiry  uint32 `protobuf:"varint,11,opt,name=Expiry" json:"Expiry,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ObjectMeta) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ObjectMeta) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ObjectMeta) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ObjectMeta) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ObjectMeta) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ObjectMeta) GetLastRetrieved() uint32 {
	if m != nil {
		return m.LastRetrieved
	}
	return 0
}

func (m *ObjectMeta) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ObjectMeta) GetLastUpdated() uint32 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *ObjectMeta) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *ObjectMeta) GetStoreID() uint32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *ObjectMeta) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type PutWithIDRequest struct {
	ID      string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Expiry  uint32 `protobuf:"varint,3,opt,name=Expiry" json:"Expiry,omitempty"`
}

func (m *PutWithIDRequest) Reset()                    { *m = PutWithIDRequest{} }
func (m *PutWithIDRequest) String() string            { return proto.CompactTextString(m) }
func (*PutWithIDRequest) ProtoMessage()               {}
func (*PutWithIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutWithIDRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PutWithIDRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PutWithIDRequest) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type GetRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Object struct {
	ID      string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Object) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Object) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ListResponse struct {
	Objects []*ObjectMeta `protobuf:"bytes,1,rep,name=Objects" json:"Objects,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListResponse) GetObjects() []*ObjectMeta {
	if m != nil {
		return m.Objects
	}
	return nil
}

type ListRequest struct {
	Prefix string `protobuf:"bytes,1,opt,name=Prefix" json:"Prefix,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type PutResponse struct {
	WasAdded bool `protobuf:"varint,1,opt,name=WasAdded" json:"WasAdded,omitempty"`
	DidExist bool `protobuf:"varint,2,opt,name=DidExist" json:"DidExist,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PutResponse) GetWasAdded() bool {
	if m != nil {
		return m.WasAdded
	}
	return false
}

func (m *PutResponse) GetDidExist() bool {
	if m != nil {
		return m.DidExist
	}
	return false
}

type GetResponse struct {
	DoesExist bool    `protobuf:"varint,1,opt,name=DoesExist" json:"DoesExist,omitempty"`
	Object    *Object `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetResponse) GetDoesExist() bool {
	if m != nil {
		return m.DoesExist
	}
	return false
}

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type EvictRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *EvictRequest) Reset()                    { *m = EvictRequest{} }
func (m *EvictRequest) String() string            { return proto.CompactTextString(m) }
func (*EvictRequest) ProtoMessage()               {}
func (*EvictRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EvictRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "objectstore.ObjectMeta")
	proto.RegisterType((*PutWithIDRequest)(nil), "objectstore.PutWithIDRequest")
	proto.RegisterType((*GetRequest)(nil), "objectstore.GetRequest")
	proto.RegisterType((*Object)(nil), "objectstore.Object")
	proto.RegisterType((*ListResponse)(nil), "objectstore.ListResponse")
	proto.RegisterType((*ListRequest)(nil), "objectstore.ListRequest")
	proto.RegisterType((*PutResponse)(nil), "objectstore.PutResponse")
	proto.RegisterType((*GetResponse)(nil), "objectstore.GetResponse")
	proto.RegisterType((*EvictRequest)(nil), "objectstore.EvictRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ObjectStore service

type ObjectStoreClient interface {
	// Put (with a known ID). Maximum object RPC size applies.
	// Only suitable for tiny little objectlets
	PutWithID(ctx context.Context, in *PutWithIDRequest, opts ...grpc.CallOption) (*common.Void, error)
	// return an object by (error if it does not exist)
	// Maximum object RPC size applies.
	// Only suitable for tiny little objectlets
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Object, error)
	// like PutWithID, but for large objects
	LPutWithID(ctx context.Context, opts ...grpc.CallOption) (ObjectStore_LPutWithIDClient, error)
	// like Get, but for large objects
	LGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ObjectStore_LGetClient, error)
	// get a list of objects in store
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// sync disk and db
	TriggerCheckDisk(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// put an object, but only if it does not exist yet
	PutIfNotExists(ctx context.Context, in *PutWithIDRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// get an object, if it exists
	TryGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// remove an object, return object if it was present
	Evict(ctx context.Context, in *EvictRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type objectStoreClient struct {
	cc *grpc.ClientConn
}

func NewObjectStoreClient(cc *grpc.ClientConn) ObjectStoreClient {
	return &objectStoreClient{cc}
}

func (c *objectStoreClient) PutWithID(ctx context.Context, in *PutWithIDRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/PutWithID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStoreClient) LPutWithID(ctx context.Context, opts ...grpc.CallOption) (ObjectStore_LPutWithIDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectStore_serviceDesc.Streams[0], c.cc, "/objectstore.ObjectStore/LPutWithID", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStoreLPutWithIDClient{stream}
	return x, nil
}

type ObjectStore_LPutWithIDClient interface {
	Send(*PutWithIDRequest) error
	CloseAndRecv() (*common.Void, error)
	grpc.ClientStream
}

type objectStoreLPutWithIDClient struct {
	grpc.ClientStream
}

func (x *objectStoreLPutWithIDClient) Send(m *PutWithIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStoreLPutWithIDClient) CloseAndRecv() (*common.Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStoreClient) LGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ObjectStore_LGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectStore_serviceDesc.Streams[1], c.cc, "/objectstore.ObjectStore/LGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStoreLGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStore_LGetClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type objectStoreLGetClient struct {
	grpc.ClientStream
}

func (x *objectStoreLGetClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStoreClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStoreClient) TriggerCheckDisk(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/TriggerCheckDisk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStoreClient) PutIfNotExists(ctx context.Context, in *PutWithIDRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/PutIfNotExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStoreClient) TryGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/TryGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStoreClient) Evict(ctx context.Context, in *EvictRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/objectstore.ObjectStore/Evict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ObjectStore service

type ObjectStoreServer interface {
	// Put (with a known ID). Maximum object RPC size applies.
	// Only suitable for tiny little objectlets
	PutWithID(context.Context, *PutWithIDRequest) (*common.Void, error)
	// return an object by (error if it does not exist)
	// Maximum object RPC size applies.
	// Only suitable for tiny little objectlets
	Get(context.Context, *GetRequest) (*Object, error)
	// like PutWithID, but for large objects
	LPutWithID(ObjectStore_LPutWithIDServer) error
	// like Get, but for large objects
	LGet(*GetRequest, ObjectStore_LGetServer) error
	// get a list of objects in store
	List(context.Context, *ListRequest) (*ListResponse, error)
	// sync disk and db
	TriggerCheckDisk(context.Context, *common.Void) (*common.Void, error)
	// put an object, but only if it does not exist yet
	PutIfNotExists(context.Context, *PutWithIDRequest) (*PutResponse, error)
	// get an object, if it exists
	TryGet(context.Context, *GetRequest) (*GetResponse, error)
	// remove an object, return object if it was present
	Evict(context.Context, *EvictRequest) (*GetResponse, error)
}

func RegisterObjectStoreServer(s *grpc.Server, srv ObjectStoreServer) {
	s.RegisterService(&_ObjectStore_serviceDesc, srv)
}

func _ObjectStore_PutWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWithIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).PutWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/PutWithID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).PutWithID(ctx, req.(*PutWithIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStore_LPutWithID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStoreServer).LPutWithID(&objectStoreLPutWithIDServer{stream})
}

type ObjectStore_LPutWithIDServer interface {
	SendAndClose(*common.Void) error
	Recv() (*PutWithIDRequest, error)
	grpc.ServerStream
}

type objectStoreLPutWithIDServer struct {
	grpc.ServerStream
}

func (x *objectStoreLPutWithIDServer) SendAndClose(m *common.Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStoreLPutWithIDServer) Recv() (*PutWithIDRequest, error) {
	m := new(PutWithIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStore_LGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStoreServer).LGet(m, &objectStoreLGetServer{stream})
}

type ObjectStore_LGetServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type objectStoreLGetServer struct {
	grpc.ServerStream
}

func (x *objectStoreLGetServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectStore_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStore_TriggerCheckDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).TriggerCheckDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/TriggerCheckDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).TriggerCheckDisk(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStore_PutIfNotExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWithIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).PutIfNotExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/PutIfNotExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).PutIfNotExists(ctx, req.(*PutWithIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStore_TryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).TryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/TryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).TryGet(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStore_Evict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStoreServer).Evict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstore.ObjectStore/Evict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStoreServer).Evict(ctx, req.(*EvictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "objectstore.ObjectStore",
	HandlerType: (*ObjectStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutWithID",
			Handler:    _ObjectStore_PutWithID_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ObjectStore_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ObjectStore_List_Handler,
		},
		{
			MethodName: "TriggerCheckDisk",
			Handler:    _ObjectStore_TriggerCheckDisk_Handler,
		},
		{
			MethodName: "PutIfNotExists",
			Handler:    _ObjectStore_PutIfNotExists_Handler,
		},
		{
			MethodName: "TryGet",
			Handler:    _ObjectStore_TryGet_Handler,
		},
		{
			MethodName: "Evict",
			Handler:    _ObjectStore_Evict_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LPutWithID",
			Handler:       _ObjectStore_LPutWithID_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LGet",
			Handler:       _ObjectStore_LGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/objectstore/objectstore.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/objectstore/objectstore.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xdf, 0x4f, 0x13, 0x41,
	0x10, 0xce, 0xb5, 0xa5, 0xb4, 0x73, 0x85, 0x90, 0x35, 0xc1, 0xb5, 0x41, 0xd3, 0x5c, 0xd4, 0x34,
	0x31, 0x39, 0xb4, 0x24, 0x86, 0x04, 0x5f, 0x90, 0x6b, 0x48, 0x63, 0xd5, 0xe6, 0x40, 0xf0, 0xf5,
	0xb8, 0x1b, 0xca, 0x8a, 0xdc, 0xd6, 0xdd, 0x2d, 0xc2, 0xff, 0xe3, 0xa3, 0x7f, 0xa4, 0xd9, 0xbd,
	0xbd, 0xeb, 0x1d, 0x02, 0xfe, 0x78, 0xea, 0x7d, 0xfb, 0xcd, 0x7c, 0x33, 0xf3, 0xcd, 0x76, 0x61,
	0x7b, 0xca, 0xbf, 0x46, 0xe9, 0xd4, 0x8f, 0x79, 0x2a, 0xa2, 0xe4, 0x3b, 0xe7, 0x89, 0x9f, 0xa2,
	0xda, 0x8c, 0x66, 0x4c, 0x6e, 0xf2, 0x93, 0x2f, 0x18, 0x2b, 0xa9, 0xb8, 0xc0, 0xf2, 0xb7, 0x3f,
	0x13, 0x5c, 0x71, 0xe2, 0x96, 0x8e, 0xba, 0xfe, 0x3d, 0x32, 0x31, 0xbf, 0xb8, 0xe0, 0xa9, 0xfd,
	0xc9, 0x92, 0xbd, 0x9f, 0x35, 0x80, 0x8f, 0x26, 0xff, 0x3d, 0xaa, 0x88, 0xac, 0x42, 0x6d, 0x14,
	0x50, 0xa7, 0xe7, 0xf4, 0x1b, 0x61, 0x6d, 0x14, 0x90, 0x35, 0xa8, 0xbf, 0xc3, 0x6b, 0x5a, 0xeb,
	0x39, 0xfd, 0x76, 0xa8, 0x3f, 0x09, 0x85, 0xe5, 0x23, 0x14, 0x92, 0xf1, 0x94, 0xd6, 0x4d, 0x58,
	0x0e, 0x35, 0x73, 0x80, 0xe2, 0x92, 0xc5, 0x48, 0x1b, 0x26, 0x3e, 0x87, 0x9a, 0xd9, 0x13, 0x18,
	0x29, 0x2e, 0xe8, 0x52, 0xc6, 0x58, 0x48, 0x9e, 0xc2, 0xca, 0x38, 0x92, 0x2a, 0x44, 0x25, 0x18,
	0x5e, 0x62, 0x42, 0x9b, 0x3d, 0xa7, 0xbf, 0x12, 0x56, 0x0f, 0x8b, 0x7c, 0x4c, 0xe8, 0xb2, 0xe1,
	0x73, 0x48, 0x7a, 0xe0, 0xea, 0xd0, 0x4f, 0xb3, 0xc4, 0xb0, 0x2d, 0xc3, 0x96, 0x8f, 0x48, 0x17,
	0x5a, 0x07, 0xda, 0x19, 0x3d, 0x46, 0xdb, 0x14, 0x2f, 0xb0, 0xe9, 0x58, 0x7f, 0x8f, 0x02, 0x0a,
	0x99, 0xae, 0x85, 0x64, 0x1d, 0x9a, 0xc3, 0xab, 0x19, 0x13, 0xd7, 0xd4, 0x35, 0x84, 0x45, 0xde,
	0x21, 0xac, 0x4d, 0xe6, 0xea, 0x98, 0xa9, 0xb3, 0x51, 0x10, 0xe2, 0xb7, 0x39, 0x4a, 0x55, 0xf2,
	0xac, 0x6d, 0x3c, 0xd3, 0xdd, 0xf2, 0x54, 0x61, 0xaa, 0x8c, 0x6f, 0x9d, 0x30, 0x87, 0x25, 0xd5,
	0x7a, 0x45, 0x75, 0x03, 0x60, 0x1f, 0xd5, 0x1d, 0x7a, 0xde, 0x00, 0x9a, 0xd9, 0x86, 0xfe, 0xbe,
	0x92, 0xb7, 0x0b, 0x9d, 0x31, 0xd3, 0x16, 0xca, 0x19, 0x4f, 0x25, 0x92, 0x57, 0xb0, 0x9c, 0x69,
	0x48, 0xea, 0xf4, 0xea, 0x7d, 0x77, 0xf0, 0xd0, 0x2f, 0x5f, 0xa4, 0xc5, 0x0d, 0x08, 0xf3, 0x38,
	0xef, 0x19, 0xb8, 0x99, 0x44, 0xd6, 0xd5, 0x3a, 0x34, 0x27, 0x02, 0x4f, 0xd9, 0x95, 0xad, 0x6f,
	0x91, 0x37, 0x04, 0x77, 0x32, 0x5f, 0x14, 0xea, 0x42, 0xeb, 0x38, 0x92, 0xbb, 0x49, 0x82, 0x89,
	0x09, 0x6c, 0x85, 0x05, 0xd6, 0x5c, 0xc0, 0x92, 0xe1, 0x15, 0x93, 0x59, 0xbf, 0xad, 0xb0, 0xc0,
	0xde, 0x67, 0x70, 0x8d, 0x05, 0x56, 0x66, 0x03, 0xda, 0x01, 0x47, 0x99, 0xc5, 0x66, 0x3a, 0x8b,
	0x03, 0xf2, 0x22, 0x77, 0xc4, 0xc8, 0xb8, 0x83, 0x07, 0xb7, 0x0c, 0x13, 0xda, 0x10, 0xef, 0x09,
	0x74, 0x86, 0x97, 0x2c, 0xbe, 0xcb, 0xde, 0xc1, 0x8f, 0x06, 0xb8, 0x59, 0xa8, 0x59, 0x3e, 0xd9,
	0x86, 0x76, 0xb1, 0x62, 0xf2, 0xb8, 0xa2, 0x7c, 0x73, 0xf5, 0xdd, 0x8e, 0x6f, 0xff, 0x4c, 0x47,
	0x9c, 0x25, 0x64, 0x0b, 0xea, 0xfb, 0xa8, 0x48, 0xd5, 0xda, 0xc5, 0x62, 0xbb, 0xb7, 0xb5, 0x49,
	0x76, 0x00, 0xc6, 0xff, 0x57, 0xaf, 0xef, 0x90, 0xd7, 0xd0, 0x18, 0xff, 0x73, 0xc9, 0x97, 0x0e,
	0xd9, 0x81, 0x86, 0xde, 0x2d, 0xa1, 0x15, 0xba, 0xb4, 0xee, 0xee, 0xa3, 0x5b, 0x18, 0xbb, 0x1b,
	0x1f, 0xd6, 0x0e, 0x05, 0x9b, 0x4e, 0x51, 0xec, 0x9d, 0x61, 0x7c, 0x1e, 0x30, 0x79, 0x4e, 0x2a,
	0x8d, 0xdd, 0xb0, 0x65, 0x04, 0xab, 0x93, 0xb9, 0x1a, 0x9d, 0x7e, 0xe0, 0xca, 0xac, 0x4f, 0xfe,
	0x69, 0x4a, 0x7a, 0x93, 0x2e, 0x4a, 0xef, 0x40, 0xf3, 0x50, 0x5c, 0xdf, 0x3b, 0x31, 0xfd, 0x9d,
	0xb0, 0xc9, 0x6f, 0x60, 0xc9, 0x5c, 0x04, 0x52, 0x9d, 0xad, 0x7c, 0x39, 0xee, 0xce, 0x7e, 0xdb,
	0x87, 0xe7, 0x29, 0xaa, 0xf2, 0xbb, 0x6a, 0x5f, 0x5a, 0xfd, 0xb4, 0x96, 0xb3, 0x4e, 0x9a, 0xe6,
	0x65, 0xdd, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x29, 0xd3, 0x94, 0xd2, 0x05, 0x00, 0x00,
}
